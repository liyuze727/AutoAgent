# main.py
# Main script to run the data analysis and feature engineering agents.

import pandas as pd
import numpy as np # Ensure numpy is imported
import uuid
from IPython.display import display, Image, Markdown # For potential display
import base64 # For displaying images if needed
import os

# Import agent classes and utility functions
try:
    from agents import DescriptionAgent, FeatureEngAgent
    from utils import build_data_context_from_df, ask_about_context
except ImportError as e:
    print(f"Error importing modules: {e}")
    print("Please ensure agents.py and utils.py are in the same directory or Python path.")
    exit()

# Import LLM and data loading components
from langchain_google_genai import ChatGoogleGenerativeAI
from sklearn.datasets import fetch_openml
from langchain_core.messages import AIMessage, HumanMessage # Import message types

# --- Configuration ---
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY') # Standard environment variable method

if not GOOGLE_API_KEY:
    print("Error: GOOGLE_API_KEY environment variable not set.")
    print("Please set the GOOGLE_API_KEY environment variable before running.")
    llm = None
    # exit() # Optionally exit if key is mandatory
else:
    # --- LLM Initialization ---
    try:
        llm = ChatGoogleGenerativeAI(
                    model="gemini-1.5-flash",
                    google_api_key=GOOGLE_API_KEY,
                    temperature=0.2,
                    convert_system_message_to_human=True # Good practice for some models
                )
        print("LLM Initialized Successfully.")
    except Exception as e:
        print(f"Error initializing LLM: {e}")
        llm = None


# --- Data Loading ---
print("\nLoading dataset...")
df_input_data = None
try:
    # Using wine-quality-red as in the notebook example
    df_input_data, _ = fetch_openml('wine-quality-red', version=1, return_X_y=True, as_frame=True)
    print(f"Dataset 'wine-quality-red' loaded successfully. Shape: {df_input_data.shape}")
except Exception as e:
    print(f"Failed to load OpenML dataset: {e}")
    # df_input_data = pd.read_csv("your_local_file.csv") # Example local load


# --- Main Execution Logic ---
if df_input_data is not None and llm is not None:
    # === Run Description Agent ===
    print("\n--- Running Description Agent ---")
    description_agent = DescriptionAgent(llm)
    desc_thread_id = uuid.uuid4().hex # Use a unique ID for this run
    desc_final_state, desc_last_msg = description_agent.run(df_input_data.copy(), thread_id=desc_thread_id) # Pass a copy

    if desc_final_state and desc_last_msg and isinstance(desc_last_msg, AIMessage): # Check if successful and last msg is AI
        print("\n--- Description Agent Final Output ---")
        print(desc_last_msg.content)

        # === Run Feature Engineering Agent ===
        print("\n--- Running Feature Engineering Agent ---")
        feature_eng_agent = FeatureEngAgent(llm)

        # Pass the *final state dictionary* from the description agent
        # The eng method now expects the dictionary containing dataset, messages, grams etc.
        # Pass the original df (or a copy) as the dataset to engineer on
        fe_final_state = feature_eng_agent.eng(df=df_input_data.copy(), description_state=desc_final_state)

        if fe_final_state:
            print("\n--- Feature Engineering Agent Final State ---")
            # Display the report generated by the FE agent
            print("\nFeature Engineering Report:")
            print(fe_final_state.get("feature_report", "No report generated."))

            # Show info about the potentially modified DataFrame
            final_df = fe_final_state.get("dataset")
            if isinstance(final_df, pd.DataFrame):
                print("\nFinal DataFrame Info:")
                final_df.info()
                print("\nFinal DataFrame Head:")
                try:
                    display(final_df.head()) # Use display for better formatting if available
                except NameError:
                    print(final_df.head()) # Fallback to print if display is not available
            else:
                 print("\nFinal dataset is not a DataFrame.")

        else:
            print("\nFeature Engineering Agent did not complete successfully or returned no state.")

    elif desc_final_state and desc_last_msg:
         print("\nDescription Agent finished, but the last message wasn't from the LLM (e.g., user feedback). Skipping FE Agent.")
         print(f"Last Message: {desc_last_msg.content}")
    else:
        print("\nDescription Agent did not complete successfully or returned no message. Cannot proceed to FE Agent.")

elif df_input_data is None:
    print("\nExecution stopped: Data loading failed.")
elif llm is None:
     print("\nExecution stopped: LLM initialization failed.")

print("\nScript finished.")
